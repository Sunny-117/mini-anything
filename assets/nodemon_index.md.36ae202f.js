import{_ as s,o as n,c as a,a as l}from"./app.9b621a0a.js";const A=JSON.parse('{"title":"nodemon","description":"","frontmatter":{},"headers":[{"level":2,"title":"nodemon 是什么","slug":"nodemon-是什么","link":"#nodemon-是什么","children":[]},{"level":2,"title":"实现思路","slug":"实现思路","link":"#实现思路","children":[{"level":3,"title":"观察文件的改变","slug":"观察文件的改变","link":"#观察文件的改变","children":[]},{"level":3,"title":"重新启动服务","slug":"重新启动服务","link":"#重新启动服务","children":[]},{"level":3,"title":"小优化","slug":"小优化","link":"#小优化","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"relativePath":"nodemon/index.md","lastUpdated":1707200727000}'),o={name:"nodemon/index.md"},p=l(`<h1 id="nodemon" tabindex="-1">nodemon <a class="header-anchor" href="#nodemon" aria-hidden="true">#</a></h1><h2 id="nodemon-是什么" tabindex="-1">nodemon 是什么 <a class="header-anchor" href="#nodemon-是什么" aria-hidden="true">#</a></h2><p>nodemon 是一个自动重启 node 应用的工具，当监听的文件或监听目录下的文件发生修改时，自动重启应用。 使用 nodemon 不需要对应用本身的代码做任何修改。nodemon 可以看作 node 的执行容器。使用 nodemon，只需要在执行代码的时候，把 node 换成 nodemon 即可。</p><h2 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-hidden="true">#</a></h2><h3 id="观察文件的改变" tabindex="-1">观察文件的改变 <a class="header-anchor" href="#观察文件的改变" aria-hidden="true">#</a></h3><p>使用第三方库：chokidar</p><p><a href="https://github.com/paulmillr/chokidar#why" target="_blank" rel="noreferrer">为什么不直接使用 Node.js fs.watch?</a></p><p>根据 chokidar 官方，为什么不直接使用 Node.js fs.watch 来观察文件的变化？</p><ol><li>Node.js fs.watch:</li></ol><ul><li>Doesn&#39;t report filenames on MacOS.</li><li>Doesn&#39;t report events at all when using editors like Sublime on MacOS.</li><li>Often reports events twice.</li><li>Emits most changes as rename.</li><li>Does not provide an easy way to recursively watch file trees.</li><li>Does not support recursive watching on Linux.</li></ul><ol start="2"><li>Node.js fs.watchFile:</li></ol><ul><li>Almost as bad at event handling.</li><li>Also does not provide any recursive watching.</li><li>Results in high CPU utilization.</li></ul><p>代码实现：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">chokidar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">restart</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="重新启动服务" tabindex="-1">重新启动服务 <a class="header-anchor" href="#重新启动服务" aria-hidden="true">#</a></h3><blockquote><p>之前需要 kill(杀死) 之前的服务 why？</p><p>防止报错：端口被占用</p></blockquote><p><code>node main.js</code> -&gt;command命令, 在 nodejs 中使用 exec 和 spawn 执行命令, 启动一个子进程来执行</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 方法1：需要等到执行完才会输出</span></span>
<span class="line"><span style="color:#82AAFF;">exec</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node test.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">stdout</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">stdout</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 方法2：流式，直接输出</span></span>
<span class="line"><span style="color:#82AAFF;">spawn</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">stdio</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stdin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stdout</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stderr]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>代码实现：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">restart</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">childProcess</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">childProcess</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">kill</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">childProcess</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">spawn</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    stdio</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stdin</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stdout</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stderr</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="小优化" tabindex="-1">小优化 <a class="header-anchor" href="#小优化" aria-hidden="true">#</a></h3><p>防抖处理</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> debounceRestart </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debounce</span><span style="color:#A6ACCD;">(restart</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">500</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">restart</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-hidden="true">#</a></h2><ul><li><p>chokidar: <a href="https://www.npmjs.com/package/chokidar" target="_blank" rel="noreferrer">https://www.npmjs.com/package/chokidar</a></p></li><li><p>exec和spawn：<a href="http://nodejs.cn/api/child_process.html" target="_blank" rel="noreferrer">http://nodejs.cn/api/child_process.html</a></p></li></ul>`,25),e=[p];function t(c,r,i,D,y,F){return n(),a("div",null,e)}const C=s(o,[["render",t]]);export{A as __pageData,C as default};
